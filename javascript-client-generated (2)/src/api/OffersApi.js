/*
 * Marketing Management Service
 * A service for adding carmodels, offers and prices for cars
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hariprasath.narayanasamy@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Model200OfferDeletedResponse} from '../model/Model200OfferDeletedResponse';
import {Model200UpdateOfferResponse} from '../model/Model200UpdateOfferResponse';
import {Model201OfferCreatedResponse} from '../model/Model201OfferCreatedResponse';
import {Model401UnauthorizedResponse} from '../model/Model401UnauthorizedResponse';
import {Model403ForbiddenResponse} from '../model/Model403ForbiddenResponse';
import {Model409ConflictResponse} from '../model/Model409ConflictResponse';
import {Model503ServerUnavailableResponse} from '../model/Model503ServerUnavailableResponse';
import {OfferDetails} from '../model/OfferDetails';
import {OfferInfo} from '../model/OfferInfo';
import {UpdateOfferInfo} from '../model/UpdateOfferInfo';

/**
* Offers service.
* @module api/OffersApi
* @version 1.0.0
*/
export class OffersApi {

    /**
    * Constructs a new OffersApi. 
    * @alias module:api/OffersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addOffer operation.
     * @callback moduleapi/OffersApi~addOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model201OfferCreatedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add offers
     * @param {Object} opts Optional parameters
     * @param {module:model/OfferInfo} opts.body Adding offers
     * @param {module:api/OffersApi~addOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addOffer(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model201OfferCreatedResponse;

      return this.apiClient.callApi(
        '/offers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteOffer operation.
     * @callback moduleapi/OffersApi~deleteOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200OfferDeletedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete offers
     * @param {String} offerId 
     * @param {module:api/OffersApi~deleteOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteOffer(offerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling deleteOffer");
      }

      let pathParams = {
        'offer_id': offerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200OfferDeletedResponse;

      return this.apiClient.callApi(
        '/offers/{offer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOfferDetails operation.
     * @callback moduleapi/OffersApi~getOfferDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get offers
     * @param {module:api/OffersApi~getOfferDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOfferDetails(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OfferDetails;

      return this.apiClient.callApi(
        '/offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateOffers operation.
     * @callback moduleapi/OffersApi~updateOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200UpdateOfferResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update offers
     * @param {String} offerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOfferInfo} opts.body Adds price and offers
     * @param {module:api/OffersApi~updateOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateOffers(offerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling updateOffers");
      }

      let pathParams = {
        'offer_id': offerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model200UpdateOfferResponse;

      return this.apiClient.callApi(
        '/offers/{offer_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}