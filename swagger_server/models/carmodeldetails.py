# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.carmodelinfo import Carmodelinfo  # noqa: F401,E501
from swagger_server import util


class Carmodeldetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model_type: str=None, model_name: str=None, transmission: str=None, fuel_type: str=None, trim: str=None, model_id: str=None):  # noqa: E501
        """Carmodeldetails - a model defined in Swagger

        :param model_type: The model_type of this Carmodeldetails.  # noqa: E501
        :type model_type: str
        :param model_name: The model_name of this Carmodeldetails.  # noqa: E501
        :type model_name: str
        :param transmission: The transmission of this Carmodeldetails.  # noqa: E501
        :type transmission: str
        :param fuel_type: The fuel_type of this Carmodeldetails.  # noqa: E501
        :type fuel_type: str
        :param trim: The trim of this Carmodeldetails.  # noqa: E501
        :type trim: str
        :param model_id: The model_id of this Carmodeldetails.  # noqa: E501
        :type model_id: str
        """
        self.swagger_types = {
            'model_type': str,
            'model_name': str,
            'transmission': str,
            'fuel_type': str,
            'trim': str,
            'model_id': str
        }

        self.attribute_map = {
            'model_type': 'model_type',
            'model_name': 'model_name',
            'transmission': 'transmission',
            'fuel_type': 'fuel_type',
            'trim': 'trim',
            'model_id': 'model_id'
        }
        self._model_type = model_type
        self._model_name = model_name
        self._transmission = transmission
        self._fuel_type = fuel_type
        self._trim = trim
        self._model_id = model_id

    @classmethod
    def from_dict(cls, dikt) -> 'Carmodeldetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The carmodeldetails of this Carmodeldetails.  # noqa: E501
        :rtype: Carmodeldetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_type(self) -> str:
        """Gets the model_type of this Carmodeldetails.


        :return: The model_type of this Carmodeldetails.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type: str):
        """Sets the model_type of this Carmodeldetails.


        :param model_type: The model_type of this Carmodeldetails.
        :type model_type: str
        """
        allowed_values = ["SUVs", "Hatchback", "Sedan", "pickuptruck", "MUV", "off road"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def model_name(self) -> str:
        """Gets the model_name of this Carmodeldetails.


        :return: The model_name of this Carmodeldetails.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this Carmodeldetails.


        :param model_name: The model_name of this Carmodeldetails.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def transmission(self) -> str:
        """Gets the transmission of this Carmodeldetails.


        :return: The transmission of this Carmodeldetails.
        :rtype: str
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission: str):
        """Sets the transmission of this Carmodeldetails.


        :param transmission: The transmission of this Carmodeldetails.
        :type transmission: str
        """
        allowed_values = ["manual", "automatic"]  # noqa: E501
        if transmission not in allowed_values:
            raise ValueError(
                "Invalid value for `transmission` ({0}), must be one of {1}"
                .format(transmission, allowed_values)
            )

        self._transmission = transmission

    @property
    def fuel_type(self) -> str:
        """Gets the fuel_type of this Carmodeldetails.


        :return: The fuel_type of this Carmodeldetails.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type: str):
        """Sets the fuel_type of this Carmodeldetails.


        :param fuel_type: The fuel_type of this Carmodeldetails.
        :type fuel_type: str
        """
        allowed_values = ["diesel", "petrol", "ev", "cng"]  # noqa: E501
        if fuel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fuel_type` ({0}), must be one of {1}"
                .format(fuel_type, allowed_values)
            )

        self._fuel_type = fuel_type

    @property
    def trim(self) -> str:
        """Gets the trim of this Carmodeldetails.


        :return: The trim of this Carmodeldetails.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim: str):
        """Sets the trim of this Carmodeldetails.


        :param trim: The trim of this Carmodeldetails.
        :type trim: str
        """
        allowed_values = ["SE", "DX", "GT"]  # noqa: E501
        if trim not in allowed_values:
            raise ValueError(
                "Invalid value for `trim` ({0}), must be one of {1}"
                .format(trim, allowed_values)
            )

        self._trim = trim

    @property
    def model_id(self) -> str:
        """Gets the model_id of this Carmodeldetails.


        :return: The model_id of this Carmodeldetails.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: str):
        """Sets the model_id of this Carmodeldetails.


        :param model_id: The model_id of this Carmodeldetails.
        :type model_id: str
        """

        self._model_id = model_id
