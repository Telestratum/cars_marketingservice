# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.offer_info import OfferInfo  # noqa: F401,E501
from swagger_server import util


class OfferDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, discount_pct: float=None, start_date: date=None, end_date: date=None, applicable_models: List[str]=None, offer_id: str=None):  # noqa: E501
        """OfferDetails - a model defined in Swagger

        :param discount_pct: The discount_pct of this OfferDetails.  # noqa: E501
        :type discount_pct: float
        :param start_date: The start_date of this OfferDetails.  # noqa: E501
        :type start_date: float
        :param end_date: The end_date of this OfferDetails.  # noqa: E501
        :type end_date: float
        :param applicable_models: The applicable_models of this OfferDetails.  # noqa: E501
        :type applicable_models: List[str]
        :param offer_id: The offer_id of this OfferDetails.  # noqa: E501
        :type offer_id: str
        """
        self.swagger_types = {
            'discount_pct': float,
            'start_date': date,
            'end_date': date,
            'applicable_models': List[str],
            'offer_id': str
        }

        self.attribute_map = {
            'discount_pct': 'discount_pct',
            'start_date': 'start_date',
            'end_date': 'end_date',
            'applicable_models': 'applicable_models',
            'offer_id': 'offer_id'
        }
        self._discount_pct = discount_pct
        self._start_date = start_date
        self._end_date = end_date
        self._applicable_models = applicable_models
        self._offer_id = offer_id

    @classmethod
    def from_dict(cls, dikt) -> 'OfferDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The offer_details of this OfferDetails.  # noqa: E501
        :rtype: OfferDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_pct(self) -> float:
        """Gets the discount_pct of this OfferDetails.


        :return: The discount_pct of this OfferDetails.
        :rtype: float
        """
        return self._discount_pct

    @discount_pct.setter
    def discount_pct(self, discount_pct: float):
        """Sets the discount_pct of this OfferDetails.


        :param discount_pct: The discount_pct of this OfferDetails.
        :type discount_pct: float
        """
        if discount_pct is None:
            raise ValueError("Invalid value for `discount_pct`, must not be `None`")  # noqa: E501

        self._discount_pct = discount_pct

    @property
    def start_date(self) -> date:
        """Gets the start_date of this OfferDetails.


        :return: The start_date of this OfferDetails.
        :rtype: float
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: date):
        """Sets the start_date of this OfferDetails.


        :param start_date: The start_date of this OfferDetails.
        :type start_date: float
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self) -> date:
        """Gets the end_date of this OfferDetails.


        :return: The end_date of this OfferDetails.
        :rtype: float
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: date):
        """Sets the end_date of this OfferDetails.


        :param end_date: The end_date of this OfferDetails.
        :type end_date: float
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def applicable_models(self) -> List[str]:
        """Gets the applicable_models of this OfferDetails.


        :return: The applicable_models of this OfferDetails.
        :rtype: List[str]
        """
        return self._applicable_models

    @applicable_models.setter
    def applicable_models(self, applicable_models: List[str]):
        """Sets the applicable_models of this OfferDetails.


        :param applicable_models: The applicable_models of this OfferDetails.
        :type applicable_models: List[str]
        """
        if applicable_models is None:
            raise ValueError("Invalid value for `applicable_models`, must not be `None`")  # noqa: E501

        self._applicable_models = applicable_models

    @property
    def offer_id(self) -> str:
        """Gets the offer_id of this OfferDetails.


        :return: The offer_id of this OfferDetails.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id: str):
        """Sets the offer_id of this OfferDetails.


        :param offer_id: The offer_id of this OfferDetails.
        :type offer_id: str
        """

        self._offer_id = offer_id
